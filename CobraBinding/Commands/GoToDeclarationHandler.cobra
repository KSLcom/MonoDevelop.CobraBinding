use MonoDevelop.Core
use MonoDevelop.Ide
use MonoDevelop.Ide.TypeSystem
use MonoDevelop.Ide.Gui
use MonoDevelop.Components.Commands

use ICSharpCode.NRefactory.TypeSystem

use MonoDevelop.CobraBinding.TypeSystem

namespace MonoDevelop.CobraBinding.Commands

class GoToDeclarationHandler inherits CommandHandler
	
	var _location as Cobra.Compiler.GoToLocation? = nil
	
	def run is protected, override
		"""
		Opens the file containing the declaration under the cursor either in the source
		editor or in the Assembly Browser if the declaration is from an assembly
		reference.
		"""
		or require _location <> nil
		
		
		if _location == nil
			return
		
		workbench = MonoDevelop.Ide.IdeApp.workbench
		
		if _location.token <> nil and File.exists(_location.token.fileName)
			# declared in source
			path = FilePath(_location.token.fileName)
			line = _location.token.lineNum
			column = _location.token.colNum
			options = OpenDocumentOptions.BringToFront | OpenDocumentOptions.TryToReuseViewer
			workbench.openDocument(path, line, column, options)
		
		else if _location.clrNativeType <> nil
			# declared in assembly reference, show in assembly browser
			try
				reflectionName = _location.clrNativeType.clrType.fullName
				typeRef = ReflectionHelper.parseReflectionName(reflectionName)
				proj = workbench.activeDocument.project
				compilation = TypeSystemService.getCompilation(proj)
				context = SimpleTypeResolveContext(compilation.mainAssembly)
				resolvedType = typeRef.resolve(context)
				
				if resolvedType <> nil and resolvedType implements INamedElement
					IdeApp.projectOperations.jumpToDeclaration(resolvedType, true)
				else
					print "Failed to resolve [reflectionName] to a type"
			
			catch ex as Exception
				print "Failed to display [reflectionName] in Assembly Browser"
				print ex
	
	
	def update(info as CommandInfo?) is protected, override
		"""
		Determines if the "Go to declaration" command should be enabled for the
		current cursor location.
		"""
		
		_location = nil
		
		try
			# get the node corresponding to the cursor position
			doc = MonoDevelop.Ide.IdeApp.workbench.activeDocument
			parsedDoc = doc.parsedDocument
			if parsedDoc inherits ParsedCobraDocument
				location = doc.editor.caret.location
				line, column = location.line, location.column
				node = parsedDoc.resolveLocationToNode(line, column, doc.editor.document to !)
				_location = node.goToDefinitionLocation
		catch
			# something was probably nil
			pass
		
		info.enabled = _location <> nil