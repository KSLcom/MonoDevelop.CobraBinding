use MonoDevelop.CobraBinding.TypeSystem

use MonoDevelop.Core
use MonoDevelop.Ide.Gui
use MonoDevelop.Components.Commands

namespace MonoDevelop.CobraBinding.Commands

class GoToDeclarationHandler inherits CommandHandler
	
	var _location as Cobra.Compiler.GoToLocation? = nil
	
	def run is protected, override
		or require _location <> nil
		
		if _location == nil
			return
		
		workbench = MonoDevelop.Ide.IdeApp.workbench
		
		if _location.token <> nil and File.exists(_location.token.fileName)
			# declared in source
			path = FilePath(_location.token.fileName)
			line = _location.token.lineNum
			column = _location.token.colNum
			options = OpenDocumentOptions.BringToFront | OpenDocumentOptions.TryToReuseViewer
			workbench.openDocument(path, line, column, options)
		
		if _location.clrNativeType <> nil
			# declared in assembly
			trace _location.clrNativeType.clrType.assemblyQualifiedName
			
			/#
			#TODO: not working, couldn't load references
			for doc in workbench.documents
				content = doc.getContent<of AssemblyBrowserViewContent?>
				if content <> nil
					# the assembly browser is already open
					content.open(location.clrNativeType.clrType.assemblyQualifiedName)
					doc.window.selectWindow
					return
			#/
			
			# open the assembly browser
			#TODO
			trace _location.clrNativeType.clrType.fullName
			trace _location.clrNativeType.clrType.assembly.fullName
	
	
	def update(info as CommandInfo?) is protected, override
		
		_location = nil
		
		try
			# get the node corresponding to the cursor position
			doc = MonoDevelop.Ide.IdeApp.workbench.activeDocument
			parsedDoc = doc.parsedDocument
			if parsedDoc inherits ParsedCobraDocument
				location = doc.editor.caret.location
				line, column = location.line, location.column
				node = parsedDoc.resolveLocationToNode(line, column, doc.editor.document to !)
				_location = node.goToDefinitionLocation
		catch
			# something was probably nil
			pass
		
		# TODO: Replace the following if/else structure with...
		#info.enabled = _location <> nil
		if _location <> nil _
		and _location.token <> nil _
		and File.exists(_location.token.fileName)
			# the location is in our source
			info.enabled = true
		else
			# the location does not exist or is in an assembly
			#info.enabled = _location.clrNativeType <> nil
			info.enabled = false