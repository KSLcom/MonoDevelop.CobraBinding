use MonoDevelop.Core
use MonoDevelop.Ide
use MonoDevelop.Ide.TypeSystem
use MonoDevelop.Ide.Gui
use MonoDevelop.Components.Commands

use ICSharpCode.NRefactory.TypeSystem

use MonoDevelop.CobraBinding.TypeSystem

namespace MonoDevelop.CobraBinding.Commands

class GoToDeclarationHandler inherits CommandHandler
	
	var _location as Cobra.Compiler.GoToLocation? = nil
	
	def run is protected, override
		"""
		Opens the file containing the declaration under the cursor either in the source
		editor or in the Assembly Browser if the declaration is from an assembly
		reference.
		"""
		or require _location <> nil
		
		
		if _location == nil
			return
		
		workbench = MonoDevelop.Ide.IdeApp.workbench
		
		if _location.token <> nil and File.exists(_location.token.fileName)
			# declared in source
			fileName = _location.token.fileName
			path = FilePath(fileName)
			line = _location.token.lineNum
			column = _location.token.colNum
			options = OpenDocumentOptions.BringToFront | OpenDocumentOptions.TryToReuseViewer | OpenDocumentOptions.CenterCaretLine
			doc = workbench.getDocument(fileName)
			project as MonoDevelop.Projects.Project? = nil
			if doc <> nil, project = doc.project
			workbench.openDocument(path, project, line, column, options)
		
		else if _location.clrNativeType <> nil
			# declared in assembly reference, show in assembly browser
			try
				reflectionName = _location.clrNativeType.clrType.fullName
				typeRef = ReflectionHelper.parseReflectionName(reflectionName)
				proj = workbench.activeDocument.project
				compilation = TypeSystemService.getCompilation(proj)
				context = SimpleTypeResolveContext(compilation.mainAssembly)
				resolvedType = typeRef.resolve(context)
				
				if resolvedType <> nil
					IdeApp.projectOperations.jumpToDeclaration(resolvedType, true)
				else
					print "Failed to resolve [reflectionName] to a type"
			
			catch ex as Exception
				print "Failed to display [reflectionName] in Assembly Browser"
				print ex
		else
			print "Don't know how to get the type for location: [_location]"
	
	
	def update(info as CommandInfo?) is protected, override
		"""
		Determines if the "Go to declaration" command should be enabled for the
		current cursor location.
		"""
		if info == nil, return
		
		_location = nil
		info.enabled = false
		
		try
			# get the node corresponding to the cursor position
			doc = MonoDevelop.Ide.IdeApp.workbench.activeDocument
			parsedDoc = doc.parsedDocument
			if parsedDoc inherits ParsedCobraDocument
				location = doc.editor.caret.location
				line, column = location.line, location.column
				node = parsedDoc.resolveLocationToNode(line, column, doc.editor.document to !)
				if node <> nil, _location = node.goToDefinitionLocation
		catch ex as Exception
			# something was probably nil
			trace ex
		
		if _location == nil, return

		if _location.token <> nil and not _location.token.isEmpty and File.exists(_location.token.fileName)
			info.enabled = true
		else if _location.clrNativeType <> nil
			info.enabled = true