use Cobra.Compiler

use MonoDevelop.Ide.TypeSystem

use ICSharpCode.NRefactory.TypeSystem

namespace MonoDevelop.CobraBinding.TypeSystem

class ParsedCobraDocument inherits DefaultParsedDocument

	test
		fileName = "test.cobra"
		source = "\n" +
			"namespace Example\n" +
			"    class TestClass\n" +
			"        def main\n" +
			"            test\n" +
			"                assert true\n" +
			"            body\n" +
			"                print 'derp'\n" +
			""
		# default has no region/symbol data
		doc = ParsedCobraDocument(fileName, source)
		assert doc.regionMap == nil
		assert doc.symbolTable == nil
		nodeMap = doc.createNodeMap
		assert nodeMap == nil
		# when created from the compiler, we get meaningful data
		cm = MonoDevelop.CobraBinding.CompilerManager.instance
		doc = cm.parseAndBind({fileName: source}, ["System.Core"], fileName)
		assert doc.regionMap.count == doc.symbolTable.count == 5
		nodeMap = doc.createNodeMap
		assert nodeMap <> nil

	var _content as String
	var _regionMap as Dictionary<of ISyntaxNode, DomRegion>?
	var _symbolTable as Dictionary<of DomRegion, Dictionary<of String, INamedNode>>?

	cue init(fileName as String, content as String)
		base.init(fileName)
		_content = content

	get content from var

	get regionMap from var

	get symbolTable from var
	
	def add(errors as SourceException*)
		for err in errors
			.add(err)
	
	def add(err as SourceException)
		col = err.colNum
		# most of the time, we don't get a valid column number for these.
		# but just in case...
		if col > 0, col -= 1
		.add(Error(ErrorType.Error, err.message, err.lineNum, col))
		
	def add(mod as CobraModule)
		.ast = mod
		visitor = CobraModuleVisitor()
		visitor.visit(mod)
		_regionMap = visitor.regionMap
		_symbolTable = visitor.symbolTable
		
	def createNodeMap as Dictionary<of DomRegion, ISyntaxNode>?
		"""
		Returns a map of DomRegions to ISyntaxNodes given a map of ISyntaxNodes to DomRegions.
		"""
		ensure
			_regionMap implies result
			_regionMap implies all for node in _regionMap.keys get node in result.values
			_regionMap implies all for region in _regionMap.values get region in result.keys
		body
			if _regionMap == nil, return nil
			nodeMap = Dictionary<of DomRegion, ISyntaxNode>()
			for node, region in _regionMap
				nodeMap[region] = node
			
			return nodeMap
			
	def getContainingRegions(line as int, col as int) as List<of DomRegion>
		"""
		Returns a list of document regions that contain the given document location.
		"""
		require
			.foldings <> nil
		ensure # we'll never return more regions than what was given
			result.count <= (for fold in .foldings get fold.region).count
		test
			rs = List<of DomRegion>()
			rs.add(DomRegion(1, 1, 10, 120))
			rs.add(DomRegion(1, 1, 5, 120))
			rs.add(DomRegion(6, 1, 10, 120))
			rs.add(DomRegion(11, 1, 15, 120))
			rs.add(DomRegion(12,1, 14, 120))
			fakeDoc = ParsedCobraDocument('fake.cobra', 'pass')
			for r in rs, fakeDoc.add(FoldingRegion(r))
			assert fakeDoc.getContainingRegions(1, 1).count == 2
			assert fakeDoc.getContainingRegions(2, 1).count == 2
			assert fakeDoc.getContainingRegions(5, 80).count == 2
			assert fakeDoc.getContainingRegions(6, 10).count == 2
			assert fakeDoc.getContainingRegions(11, 1).count == 1
			assert fakeDoc.getContainingRegions(13, 1).count == 2
			assert fakeDoc.getContainingRegions(15, 20).count == 1
			assert fakeDoc.getContainingRegions(16, 1).count == 0
		body
			containingRegions = List<of DomRegion>()
			for f in .foldings
				r = f.region
				if r.isInside(line, col)
					containingRegions.add(r)

			return containingRegions
			
