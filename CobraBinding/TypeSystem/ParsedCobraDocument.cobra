use Cobra.Compiler

use MonoDevelop.Ide.TypeSystem

use ICSharpCode.NRefactory.TypeSystem

namespace MonoDevelop.CobraBinding.TypeSystem

class ParsedCobraDocument inherits DefaultParsedDocument

	test
		fileName = "test.cobra"
		source = "\n" +
			"namespace Example\n" +
			"    class TestClass\n" +
			"        def main\n" +
			"            test\n" +
			"                assert true\n" +
			"            body\n" +
			"                print 'derp'\n" +
			""
		# default has no region/symbol data
		doc = ParsedCobraDocument(fileName, source)
		assert doc.regionMap == nil
		assert doc.symbolTable == nil
		# when created from the compiler, we get meaningful data
		cm = MonoDevelop.CobraBinding.CompilerManager.instance
		doc = cm.parseAndBind({fileName: source}, ["System.Core"], fileName)
		assert doc.regionMap.count == doc.symbolTable.count == 5

	var _content as String
	var _regionMap as Dictionary<of ISyntaxNode, DomRegion>?
	var _symbolTable as Dictionary<of DomRegion, Dictionary<of String, INamedNode>>?

	cue init(fileName as String, content as String)
		base.init(fileName)
		_content = content

	get content from var

	get regionMap from var

	get symbolTable from var
		
	def add(err as SourceException)
		col = err.colNum
		# most of the time, we don't get a valid column number for these.
		# but just in case...
		if col > 0, col -= 1
		.add(Error(ErrorType.Error, err.message, err.lineNum, col))
		
	def add(mod as CobraModule)
		.ast = mod
		visitor = CobraModuleVisitor()
		visitor.visit(mod)
		_regionMap = visitor.regionMap
		_symbolTable = visitor.symbolTable