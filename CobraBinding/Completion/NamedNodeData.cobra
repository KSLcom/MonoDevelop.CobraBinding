use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace MonoDevelop.CobraBinding.Completion

class NamedNodeData inherits CompletionData
	"""
	This class represents a single entry for use in a list of completion data.
	"""
	var _node as INamedNode
	var _tooltipInfo as TooltipInformation? = nil
	
	cue init(node as INamedNode)
		base.init
		_node = node
		.icon = Icons.getStock(node)
		if node inherits Box
			if node.isGeneric
				# TODO: How should we handle all the Action<of T1...Tn> generics?
				genericStrings = _createGenericStrings(node)
				toReplace = genericStrings.a
				replaceWith = genericStrings.b
				.displayText = node.name.replace(toReplace, replaceWith)
			else
				.displayText = node.name
		else
			.displayText = node.name
		
		# this is text visible in the completion list in a slightly darker color font, is it useful?
		#.displayDescription = ""
		
		# this might be for marking which members implement something in an interface...I am not sure
		#.completionCategory =
		
		# I think this is for marking some members as obsolete and using a strikethrough font
		#.displayFlags =
	
	get node from var
	
	get completionText as String is override
		"""
		The actual text inserted into the document
		when a completion data entry is selected.
		"""
		if _node inherits Box
			if _node.isGeneric
				tagPos = _node.name.indexOf(c'<')
				return _node.name.substring(0, tagPos) + "<of"
		
		return _node.name
		
	def createTooltipInformation(smartWrap as bool) as TooltipInformation is override
		"""
		Create the tooltip that displays next to the highlighted completion entry.
		"""
		if _tooltipInfo <> nil, return _tooltipInfo
		
		info = TooltipInformation()
		info.signatureMarkup = .signature
		info.summaryMarkup = .description
		
		_tooltipInfo = info
		return _tooltipInfo to !
		
	get signature as String
		"""
		Appears as the signatureMarkup in the tooltip for this completion entry.
		"""
		
		# a node may not have a type if we couldn't bind the types in the AST
		desc = "?"
		
		try
			if _node inherits Box
				desc = _node.qualifiedName
				if _node.isGeneric
					genericStrings = _createGenericStrings(_node)
					toReplace = genericStrings.a
					replaceWith = genericStrings.b
					desc = desc.replace(toReplace, replaceWith)
				
			else if _node inherits AbstractMethod
				if _node inherits Method
					desc = _createMethodSignature(_node)
				else
					desc = _node.resultType.name
				
			else if _node inherits Property
				desc = _node.resultType.name
			
			else if _node inherits BoxEvent
				desc = _node.resultType.name
			
			else if _node inherits BoxField
				desc = _node.type.name
			
			else if _node inherits AbstractLocalVar
				desc = _node.type.name
			
			else if _node inherits NameSpace
				desc = _node.fullName
			
			else if _node inherits EnumDecl
				desc = "[_node.parentNameSpace.fullName].[_node.name]"
			
			else if _node inherits EnumMember
				if _node.value == nil
					# no need to include tooltip because the user has already typed the EnumDecl name
					desc = ""
				else
					desc = "[_node.resultType.name] (value = [_node.value])"
			else
				desc = _node.getType.assemblyQualifiedName ? ""
		catch ex as Exception
			desc = ex.toString
		
		# remove tab characters otherwise it messes up the formatting in the tooltip
		desc = desc.replace("\t", "")
		
		#TODO: fix line breaks in the doc string
		return desc
		
	get summary as String
		return .description
	
	get description as String is override
		"""
		Appears as the summaryMarkup in the tooltip for this completion entry.
		"""
		n = _node to dynamic
		try
			desc = n.docString ? ""
			# remove tab characters otherwise it messes up the formatting in the tooltip
			desc = desc.replace("\t", "")
			#TODO: fix line breaks in the doc string
		catch
			desc = ""
		
		return desc
		
	def _createMethodSignature(m as Method) as String
		"""
		Returns a string with the parameter names and types (if any) in the method's tooltip.
		"""
		if m.params.count > 0
			sb = StringBuilder()
			for p in m.params
				if sb.length == 0
					sb.append("(")
				else
					sb.append(", ")
				sb.append("[p.name] as [p.type.name]")
			if sb.length > 0, sb.append(") as ")
			sb.append(m.resultType.name)
			return sb.toString
		else
			return m.resultType.name
			
	def _createGenericStrings(b as Box) as Pair<of String>
		"""
		Given a box declaration for a generic type, will return a pair of
		strings so a more accurate type name can be created.  The first
		string in the pair should be replaced with the second string in
		the box name.
		"""
		require b.isGeneric
		
		if b.genericParams.count == 1
			toReplace = "<of>"
			replaceWith = "<of [b.genericParams[0].name]>"
		else
			toReplace = "<of"
			replaceWith = ""
			for gp in b.genericParams
				if replaceWith.length > 0
					toReplace += ","
					replaceWith += ", [gp.name]"
				else
					replaceWith = "<of [gp.name]"
			toReplace += ">"
			replaceWith += ">"
			
		return Pair<of String>(toReplace, replaceWith)
		
	get hasOverloads as bool is override
		if _node inherits Method
			if _node.overloadGroup <> nil
				return _node.overloadGroup.members.count > 0
		return false
	
	get overloadedData as IEnumerable<of ICompletionData>? is override
		if _node inherits Method
			if _node.overloadGroup <> nil
				overloads = CompletionDataList()
				for m in _node.overloadGroup.members
					overloads.add(NamedNodeData(m))
				return overloads
		return nil
		