use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace MonoDevelop.CobraBinding.Completion

class NamedNodeData inherits CompletionData
	"""
	This class represents a single entry for use in a list of completion data.
	"""

	var _node as INamedNode
	var _description as String? = nil
	var _completionText as String? = nil
	
	cue init(node as INamedNode)
		base.init
		_node = node
		.icon = Icons.getStock(node)
		if node inherits Box
			if node.isGeneric
				# TODO: How should we handle all the Action<of T1...Tn> generics?
				genericStrings = _createGenericStrings(node)
				toReplace = genericStrings.a
				replaceWith = genericStrings.b
				.displayText = node.name.replace(toReplace, replaceWith)
			else
				.displayText = node.name
		else
			.displayText = node.name
		
		# this is text visible in the completion list in a slightly darker color font, is it useful?
		#.displayDescription = ""
		
		# this might be for marking which members implement something in an interface...I am not sure
		#.completionCategory =
		
		# I think this is for marking some members as obsolete and using a strikethrough font
		#.displayFlags =
	
	get node from var
	
	get completionText as String is override
		"""
		The actual text inserted into the document
		when a completion data entry is selected.
		"""
		if _node inherits Box
			if _node.isGeneric
				tagPos = _node.name.indexOf(c'<')
				return _node.name.substring(0, tagPos) + "<of "
				
		return _node.name
	
	get description as String is override
		"""
		Appears as a tooltip when this entry is highlighted.		
		"""
		if _description == nil
			# a node may not have a type if we couldn't bind the types in the AST
			try
				if _node inherits Box
					_description = _node.qualifiedName
					if _node.isGeneric
						genericStrings = _createGenericStrings(_node)
						toReplace = genericStrings.a
						replaceWith = genericStrings.b
						_description = _description.replace(toReplace, replaceWith)
					if not String.isNullOrEmpty(_node.docString)
						_description += "\n[_node.docString]"
						
				else if _node inherits AbstractMethod
					if _node inherits Method
						_description = _createMethodDescription(_node)
					else
						_description = _node.resultType.name
					if not String.isNullOrEmpty(_node.docString)
						_description += "\n[_node.docString]"
						
				else if _node inherits Property
					_description = _node.resultType.name
					if not String.isNullOrEmpty(_node.docString)
						_description += "\n[_node.docString]"
						
				else if _node inherits BoxEvent
					_description = _node.resultType.name
					
				else if _node inherits BoxField
					_description = _node.type.name
					
				else if _node inherits AbstractLocalVar
					_description = _node.type.name
					
				else if _node inherits NameSpace
					_description = _node.fullName
					if not String.isNullOrEmpty(_node.docString)
						_description += "\n[_node.docString]"
				
				else if _node inherits EnumDecl
					_description = "[_node.parentNameSpace.fullName].[_node.name]"
					if not String.isNullOrEmpty(_node.docString)
						_description += "\n[_node.docString]"
				else
					_description = _node.getType.assemblyQualifiedName
			catch ex as Exception
				_description = ex.toString
			
			if _description == nil
				_description = "?"
			
			# remove tab characters otherwise it messes up the formatting in the tooltip
			_description = _description.replace("\t", "")
			
			#TODO: fix line breaks
			
		return _description to !
		
	def _createMethodDescription(m as Method) as String
		"""
		Displays the parameter names and types (if any) in the method's tooltip.
		"""
		if m.params.count > 0
			sb = StringBuilder()
			for p in m.params
				if sb.length == 0
					sb.append("(")
				else
					sb.append(", ")
				sb.append("[p.name] as [p.type.name]")
			if sb.length > 0, sb.append(") as ")
			sb.append(m.resultType.name)
			return sb.toString
		else
			return m.resultType.name
			
	def _createGenericStrings(b as Box) as Pair<of String>
		"""
		Given a box declaration for a generic type, will return a pair of
		strings so a more accurate type name can be created.  The first
		string in the pair should be replaced with the second string in
		the box name.
		"""
		require b.isGeneric
		
		if b.genericParams.count == 1
			toReplace = "<of>"
			replaceWith = "<of [b.genericParams[0].name]>"
		else
			toReplace = "<of"
			replaceWith = ""
			for gp in b.genericParams
				if replaceWith.length > 0
					toReplace += ","
					replaceWith += ", [gp.name]"
				else
					replaceWith = "<of [gp.name]"
			toReplace += ">"
			replaceWith += ">"
			
		return Pair<of String>(toReplace, replaceWith)
		
	get hasOverloads as bool is override
		if _node inherits Method
			if _node.overloadGroup <> nil
				return _node.overloadGroup.members.count > 0
		return false
	
	get overloadedData as IEnumerable<of ICompletionData>? is override
		if _node inherits Method
			if _node.overloadGroup <> nil
				overloads = CompletionDataList()
				for m in _node.overloadGroup.members
					overloads.add(NamedNodeData(m))
				return overloads
		return nil
		