use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace MonoDevelop.CobraBinding.Completion

class BoxMembersList inherits CompletionDataList
	"""
	This class is a completion data list whose entries are the members of the given Box.
	"""
	
	# Used to only include some Box members such as "only public" or "only shared".
	sig Filter(m as IBoxMember) as bool
	
	var _box as Box
	
	# Used to prevent duplicates
	var _uniqueEntries = HashSet<of String>()
	
	cue init(b as Box)
		.init(b, nil)
	
	cue init(b as Box, filter as Filter?)
		base.init
		_box = b
		print "Creating data list for [_box.name]..."
		
		try
			# our compiler instance may no longer be valid so these calls could fail
			if not b.didBindInh, b.bindAll
			_addMembers(b.allMembers, filter)
		catch
			print "Failed to .bindAll or access .allMembers for [b.name]"
		
		try
			_addMembers(b.declsInOrder, filter)
		catch
			print "Failed to access .declsInOrder for [b.name]"
		
		print "Created data list for [_box.name] with [.count] members"
		
				
	def _addMembers(members as IBoxMember*, filter as Filter?)
		
		/# Pretend we've already seen 'cue.init' and the indexer '[]'
		so they are not included in the final list #/
		_uniqueEntries.add("cue.init")
		_uniqueEntries.add(ns'[]')
		
		if filter == nil
			# include all members
			for m in members
				if _uniqueEntries.add(m.name)
					.add(NamedNodeData(m))
				else
					#TODO: add overload
					pass
		else
			# we should only include some members
			for m in members
				if filter(m)
					if _uniqueEntries.add(m.name)
						.add(NamedNodeData(m))
					else
						#TODO: add overload
						pass
				else
					print "[m.name] was not included in list of members due to filter"
