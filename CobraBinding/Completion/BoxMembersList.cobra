use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace MonoDevelop.CobraBinding.Completion

class BoxMembersList inherits CobraCompletionList
	"""
	This class is a completion data list whose entries are the members of the given Box.
	"""
	
	test
		ast = CobraCompletionTextEditorExtension.createTestData
		ns1 = ast.topNameSpace.memberForName("TopLevelNameSpace") to NameSpace
		ns2 = ns1.memberForName("SecondLevelNameSpace") to NameSpace
		ns3 = ns2.memberForName("ThirdLevelNameSpace")to NameSpace
		f = ns3.memberForName("First") to Class
		
		data = BoxMembersList(f)
		assert data.box is f
		assert data.count >= 33 and data.count <= f.allMembers.count
		
		filteredData = BoxMembersList(f, do(m as IBoxMember) = "public" in m.isNames)
		assert filteredData.box is f
		assert filteredData.count >= 17
		assert filteredData.count < data.count
	
	# Used to only include some Box members such as "only public" or "only shared".
	sig MemberFilter(m as IBoxMember) as bool
	
	var _box as Box
	
	get box from var
	
	# Used to prevent duplicates
	var _uniqueEntries = HashSet<of String>()
	
	cue init(b as Box)
		.init(b, nil)
	
	cue init(b as Box, filter as MemberFilter?)
		base.init
		_box = b
		
		/# Pretend we've already seen 'cue.init' and the indexer '[]'
		so they are not included in the final list #/
		_uniqueEntries.add("cue.init")
		_uniqueEntries.add(ns'[]')
		
		try
			# our compiler instance may no longer be valid so these calls could fail
			if not b.didBindInh, b.bindAll
			_addMembers(b.allMembers, filter)
		catch
			print "Failed to .bindAll or access .allMembers for [b.name]"
		
		try
			_addMembers(b.declsInOrder, filter)
		catch
			print "Failed to access .declsInOrder for [b.name]"
		
		if b inherits Extension
			# include the public members from the extended box
			publicOnly as MemberFilter? = nil
			if filter <> nil
				# TODO: I'm thinking using a sig for filtering is wasteful...
				publicOnly = do(m as IBoxMember)
					return if(filter(m), "public" in m.isNames, false)
			else
				publicOnly = do(m as IBoxMember)
					return "public" in m.isNames
			try
				_addMembers(b.extendedBox.allMembers, publicOnly)
			catch
				_addMembers(b.extendedBox.declsInOrder, publicOnly)
		
	def _addMembers(members as IBoxMember*, filter as MemberFilter?)
		"""
		Adds an entry to the completion data list for each member in
		the stream `members` that matches the criteria defined by `filter`.
		"""
		
		if filter == nil
			# include all members
			for m in members
				if _uniqueEntries.add(m.name)
					.add(NamedNodeData(m))
		else
			# we should only include some members
			for m in members
				if _uniqueEntries.add(m.name) and filter(m)
					.add(NamedNodeData(m))


	def addExtensionMethods(ns as NameSpace)
		"""
		Adds completion data entries for extension methods declared in the
		given namespace for this box.
		"""
		publicOnly as MemberFilter = do(m as IBoxMember)
			return "public" in m.isNames
			
		for nsMember in ns.declsInOrder
			if nsMember inherits Extension
				extendedBox = nsMember.extendedBox
				if extendedBox <> nil
					extendedBox.prepIfNeeded
					
					if _box.isAssignableTo(extendedBox)
						_addMembers(nsMember.declsInOrder, publicOnly)
					
					else if _box.isGeneric and extendedBox.isGeneric
						extDef = extendedBox.genericDef to !
						if _box.genericDef == extDef _
						or any for baseInterface in _box.baseInterfaces get baseInterface.genericDef == extDef
							# this is either the same generic definition
							# or we are implementing the same interface.
							# either way it's okay to include the extension members
							boxTemplate = _box.constructedTypeOf(extDef)
							constructedBox = nsMember.constructedTypeFor(boxTemplate.genericParams)
							try
								constructedBox.prepIfNeeded
							catch ex as Exception
								# Something that relied on a valid compiler instance probably failed
								print "a call to constructedBox.prepIfNeeded failed"
								trace ex.message
							_addMembers(constructedBox.declsInOrder, publicOnly)
	